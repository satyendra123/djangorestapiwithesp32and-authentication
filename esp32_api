#Step-1 esp32/apps.py
from django.apps import AppConfig
class Esp32ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'esp32_api'

#step-2 esp32/models.py
from django.db import models
class SensorData(models.Model):
    device_id = models.CharField(max_length=50)
    sensor_type = models.CharField(max_length=50)
    value = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.device_id} - {self.sensor_type}"

#Step-3 esp32/serializers.py
'''
from rest_framework import serializers
class SensorData(serializers.Serializer):
    device_id = serializers.CharField(max_length=50)
    sensor_type = serializers.CharField(max_length=50)
    value = serializers.FloatField()
    timestamp = serializers.DateTimeField(auto_now_add=True)
'''

from rest_framework import serializers
from .models import SensorData

class SensorDataSerializer(serializers.ModelSerializer):
    class Meta:
        model = SensorData
        fields = '__all__'

#step-4 esp32/urls.py
# esp32_api/urls.py
'''
from django.urls import path
from . import views

urlpatterns = [
    path('api/sensor-data/', views.sensor_data_view, name='sensor_data_view'),
    path('get_sensor_data/', views.get_sensor_data, name='get_sensor_data'),
]
'''

from django.urls import path
from . import views

urlpatterns = [
    path('update/', views.sensor_data_view, name='update_sensor_data'),
    #path('get/', views.get_sensor_data, name='get_sensor_data'),
]

#step-5 esp32/views.py
#Note- remeber one thing firstly your laptop and the esp32 would be connected with the same network. in my case it is wifi so i have cheked my laptop ip by writing the ipconfig in the cmd
# after that i will get my ip so in this ip only i will send the http post request with the port. and i will run my django rest framework code in the same
#ip address and port. and with that settings you will see the data is received in the database

#EXAMPLE-1 is code me humne postman se data send karke check kiya tha ki database me data store ho rha hai yaa nahi postman me hit krne ke bad
'''
from django.shortcuts import render

# Create your views here.
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import SensorData
from .serializers import SensorDataSerializer

@api_view(['POST'])
def sensor_data_view(request):
    serializer = SensorDataSerializer(data=request.data)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
def get_sensor_data(request):
    sensor_data = SensorData.objects.all()
    serializer = SensorDataSerializer(sensor_data, many=True)
    return Response(serializer.data)

'''
#EXAMPLE-2 is code me maine esp32 se data send kiya tha aur us data ko receive karke isme print karaya tha. database me store nahi karaya tha
'''
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response

@api_view(['POST'])
def sensor_data_view(request):
    data = request.data
    device_id = data.get('device_id')
    sensor_type = data.get('type')
    value = data.get('value')

    if device_id and sensor_type and value:
        print(f"Received {sensor_type} data from device {device_id}: {value}")
        return Response({'message': 'Data received successfully'}, status=status.HTTP_200_OK)
    else:
        return Response({'error': 'Invalid data format'}, status=status.HTTP_400_BAD_REQUEST)

'''
#this is live testing code. i have tested it and the data is stored in the database. just remeber the one thing. firstly 
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import SensorData
from .serializers import SensorDataSerializer

@api_view(['POST'])
def sensor_data_view(request):
    data = request.data
    device_id = data.get('device_id')
    sensor_type = data.get('type')
    value = data.get('value')

    if device_id and sensor_type and value:
        # Create a new SensorData object
        sensor_data = SensorData(device_id=device_id, sensor_type=sensor_type, value=value)
        sensor_data.save()

        print(f"Received {sensor_type} data from device {device_id}: {value}")
        return Response({'message': 'Data received and saved successfully'}, status=status.HTTP_200_OK)
    else:
        return Response({'error': 'Invalid data format'}, status=status.HTTP_400_BAD_REQUEST)
